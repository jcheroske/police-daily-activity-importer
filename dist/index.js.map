{"version":3,"sources":["webpack:///webpack/bootstrap 7539d88dac66a8c0079c","webpack:///external \"winston\"","webpack:///external \"envalid\"","webpack:///external \"moment\"","webpack:///./src/database.js","webpack:///./src/maps.js","webpack:///./src/scraper.js","webpack:///external \"bluebird\"","webpack:///./src/index.js","webpack:///external \"@google/maps\"","webpack:///external \"apollo-client\"","webpack:///external \"graphql-tag\"","webpack:///external \"isomorphic-fetch\"","webpack:///external \"lodash\"","webpack:///external \"request-x-ray\"","webpack:///external \"x-ray\""],"names":["name","result","client","query","fetchPolicy","config","data","allConfigs","configId","id","getConfigParam","value","mutate","mutation","undefined","setConfigParam","incidents","incident","addIncident","info","length","addIncidents","isIncidentUnsaved","createIncident","debug","caseNumber","description","offense","reportedAt","toISOString","streetAddress","Incident","database","env","cleanEnv","process","GRAPH_QL_ENDPOINT","desc","networkInterface","uri","Object","freeze","newIncidents","locationInfo","geocodeAddress","city","state","push","address","split","trim","zipCode","match","lat","lng","addLocationInfoToIncidents","join","response","geocode","asPromise","err","error","json","results","warn","formatted_address","geometry","location","maps","GOOGLE_MAPS_API_KEY","createClient","key","Promise","date","scrapeRange","scrape","startMoment","endMoment","options","method","form","btnGo","RequestType","getFormDateFields","getFormSecurityFields","xRay","filters","parseDate","parseAddress","parseDescription","driver","selector","fromCallback","POLICE_INCIDENT_URL","cb","securityFields","MONTHS","ddlFromMonth","month","ddlFromDate","ddlFromYear","year","ddlToMonth","ddlToDate","ddlToYear","re","exec","indexOf","Number","Date","replace","scraper","numMapsRequests","lastImportDateStr","console","log","dateToImport","add","isBefore","toString","scrapedIncidents","MAPS_REQUESTS_PER_DAY","incidentsWithLocation","run","TZ","catch"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7539d88dac66a8c0079c","module.exports = require(\"winston\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"winston\"\n// module id = 0\n// module chunks = 0","module.exports = require(\"envalid\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"envalid\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"moment\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment\"\n// module id = 2\n// module chunks = 0","import ApolloClient, { createNetworkInterface } from 'apollo-client'\nimport envalid, {str} from 'envalid'\nimport gql from 'graphql-tag'\nimport 'isomorphic-fetch'\nimport moment from 'moment'\nimport log from 'winston'\n\nlet client, configId\n\nasync function getConfigParam (name) {\n  const result = await client.query({\n    fetchPolicy: 'network-only',\n    query: gql`\n      query {\n        allConfigs {\n          id,\n          ${name}\n        }  \n      }\n    `\n  })\n\n  const config = result.data.allConfigs[0]\n  configId = config.id\n\n  return config[name]\n}\n\nasync function setConfigParam (name, value) {\n  await client.mutate({\n    mutation: gql`\n      mutation {\n        updateConfig (\n          id: \"${configId}\",\n          ${name}: \"${value}\"\n        ) {\n          id\n        }\n      }\n    `\n  })\n  return undefined\n}\n\nasync function addIncidents (incidents) {\n  for (const incident of incidents) {\n    await addIncident(incident)\n  }\n  log.info(`Database: saved ${incidents.length} incidents`)\n}\n\nasync function addIncident (incident) {\n  if (await isIncidentUnsaved(incident)) {\n    createIncident(incident)\n  }\n}\n\nasync function createIncident (incident) {\n  log.debug('Creating new Incident', incident)\n  const {data: {createIncident}} = await client.mutate({\n    mutation: gql`\n      mutation {\n        createIncident(\n          caseNumber: \"${incident.caseNumber}\"\n          description: \"${incident.description}\"\n          offense: \"${incident.offense}\"\n          reportedAt: \"${incident.reportedAt.toISOString()}\"\n          streetAddress: \"${incident.streetAddress}\"\n        ) {\n          id,\n          caseNumber\n        }\n      }\n    `\n  })\n  return createIncident\n}\n\nasync function isIncidentUnsaved (incident) {\n  const {data: {Incident}} = await client.query({\n    fetchPolicy: 'network-only',\n    query: gql`\n      query {\n        Incident(caseNumber: \"${incident.caseNumber}\") {\n          id,\n          caseNumber\n        }  \n      }\n    `\n  })\n  log.debug(`Database: case number ${incident.caseNumber} does not already exist`)\n  return Incident == null\n}\n\nlet database\nexport default () => {\n  if (!database) {\n    const env = envalid.cleanEnv(process.env, {\n      GRAPH_QL_ENDPOINT: str({desc: 'GraphQL endpoint URL'})\n    })\n\n    log.info('Database: connecting to GraphQL endpoint.')\n    client = new ApolloClient({\n      networkInterface: createNetworkInterface({\n        uri: env.GRAPH_QL_ENDPOINT\n      })\n    })\n    database = Object.freeze({getConfigParam, setConfigParam, addIncidents})\n    log.info('Database: successfully connected to GraphQL endpoint.')\n  }\n  return database\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database.js","import GoogleMaps from '@google/maps'\nimport envalid, {str} from 'envalid'\nimport {isEmpty} from 'lodash'\nimport log from 'winston'\n\nlet client\n\nasync function addLocationInfoToIncidents (incidents) {\n  const newIncidents = []\n  for (const incident of incidents) {\n    const locationInfo = await geocodeAddress({\n      streetAddress: incident.streetAddress,\n      city: 'Bellingham',\n      state: 'WA'\n    })\n\n    if (locationInfo) {\n      newIncidents.push({\n        ...incident,\n        streetAddress: locationInfo.address.split(',')[0].trim(),\n        zipCode: locationInfo.address.match(/\\d{5}/)[0],\n        lat: locationInfo.lat,\n        lng: locationInfo.lng\n      })\n    }\n  }\n  log.info(`Maps: geocoded ${newIncidents.length} incidents`)\n  return newIncidents\n}\n\nasync function geocodeAddress ({streetAddress, city, state}) {\n  const address = [streetAddress, city, state].join(', ')\n  log.debug(`Maps: about to geocode ${address}`)\n  let response\n  try {\n    response = await client.geocode({address}).asPromise()\n  } catch (err) {\n    log.error('Error during geocode', err)\n  }\n\n  if (!response || isEmpty(response.json.results)) {\n    log.warn(`Maps: geocode failed for ${address}`)\n    return undefined\n  } else {\n    const {formatted_address: address, geometry: {location: {lat, lng}}} = response.json.results[0]\n    log.debug(`Maps: geocode successful: ${address} ${lat} ${lng}`)\n    return {address, lat, lng}\n  }\n}\n\nlet maps\nexport default () => {\n  if (!maps) {\n    const env = envalid.cleanEnv(process.env, {\n      GOOGLE_MAPS_API_KEY: str({desc: 'Google maps node API key'})\n    })\n\n    client = GoogleMaps.createClient({\n      key: env.GOOGLE_MAPS_API_KEY,\n      Promise\n    })\n\n    maps = Object.freeze({addLocationInfoToIncidents})\n    log.info('Maps: initialized')\n  }\n  return maps\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/maps.js","import envalid, {str} from 'envalid'\nimport makeDriver from 'request-x-ray'\nimport Xray from 'x-ray'\nimport log from 'winston'\n\nlet POLICE_INCIDENT_URL\nconst MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nasync function scrape (date) {\n  return scrapeRange(date, date)\n}\n\nasync function scrapeRange (startMoment, endMoment) {\n  const options = {\n    method: 'POST',\n    form: {\n      btnGo: 'Go',\n      RequestType: 'radbtnDetails',\n      ...getFormDateFields(startMoment, endMoment),\n      ...await getFormSecurityFields()\n    }\n  }\n\n  const xRay = Xray({\n    filters: {\n      parseDate,\n      parseAddress,\n      parseDescription,\n      trim\n    }\n  })\n  xRay.driver(makeDriver(options))\n\n  const selector = {\n    incidents: xRay('td.info', [{\n      reportedAt: 'b:nth-of-type(1) | parseDate',\n      streetAddress: 'b:nth-of-type(2) | parseAddress | trim',\n      offense: 'b:nth-of-type(3) | trim',\n      caseNumber: 'b:nth-of-type(4) | trim',\n      description: '@html | parseDescription | trim'\n    }])\n  }\n\n  try {\n    const {incidents} = await Promise.fromCallback(cb => xRay(POLICE_INCIDENT_URL, selector)(cb))\n    log.info(`Scraper: ${incidents.length} incidents retreived`)\n    return incidents\n  } catch (err) {\n    log.error('Scraper: error while fetching incidents', err)\n    throw err\n  }\n}\n\nasync function getFormSecurityFields () {\n  const selector = {\n    '__VIEWSTATE': 'input[name=\"__VIEWSTATE\"]@value',\n    '__VIEWSTATEGENERATOR': 'input[name=\"__VIEWSTATEGENERATOR\"]@value',\n    '__EVENTVALIDATION': 'input[name=\"__EVENTVALIDATION\"]@value'\n  }\n\n  const xRay = Xray()\n  try {\n    const securityFields = await Promise.fromCallback(cb => xRay(POLICE_INCIDENT_URL, selector)(cb))\n    log.info('Scraper: obtained security fields')\n    return securityFields\n  } catch (err) {\n    log.error('Scraper: error while fetching security fields', err)\n    throw err\n  }\n}\n\nconst getFormDateFields = (startMoment, endMoment) => {\n  return {\n    ddlFromMonth: startMoment.month(),\n    ddlFromDate: startMoment.date(),\n    ddlFromYear: startMoment.year(),\n    ddlToMonth: endMoment.month(),\n    ddlToDate: endMoment.date(),\n    ddlToYear: endMoment.year()\n  }\n}\n\nconst parseDate = value => {\n  if (!value) return undefined\n\n  const re = /([A-Z][a-z]{2})\\s+(\\d{1,2})\\s+(\\d{4})\\s+(\\d{1,2}):(\\d{2})(AM|PM)/\n  const result = re.exec(value)\n  const date = [\n    result[3], // year\n    MONTHS.indexOf(result[1]), // month\n    result[2], // day\n    result[6] === 'PM' && Number(result[4]) < 12 ? Number(result[4]) + 12 : result[4], // hour\n    result[5] // minute\n  ]\n\n  return new Date(...date)\n}\n\nconst parseAddress = value => value.replace('BLK', '').replace(/\\s+/g, ' ')\n\nconst parseDescription = value => {\n  if (!value) return undefined\n\n  const re = /([^>]*)(<br>)?$/\n  const result = re.exec(value)\n  return result == null ? undefined : result[1].replace(/(\\s|\\\\n|\\\\r|\\\\t)+/g, ' ')\n}\n\nconst trim = value => value.trim()\n\nlet scraper\nexport default () => {\n  if (!scraper) {\n    const env = envalid.cleanEnv(process.env, {\n      POLICE_INCIDENT_URL: str({desc: 'Police daily activity URL'})\n    })\n\n    POLICE_INCIDENT_URL = env.POLICE_INCIDENT_URL\n    scraper = Object.freeze({\n      scrape\n    })\n    log.info('Scraper: initialized')\n  }\n  return scraper\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/scraper.js","module.exports = require(\"bluebird\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird\"\n// module id = 6\n// module chunks = 0","/* global Promise:true */\nimport BluebirdPromise from 'bluebird'\nimport moment from 'moment'\nimport log from 'winston'\nimport getDatabase from './database'\nimport getMaps from './maps'\nimport getScraper from './scraper'\n\nprocess.env.TZ = 'UTC'\nPromise = BluebirdPromise\n\nconst MAPS_REQUESTS_PER_DAY = 2450\n\nrun()\n  .catch(err => log.error(err))\n\nasync function run () {\n  log.info('Police Daily Activity Importer starting...')\n  let numMapsRequests = 0\n  while (true) {\n    const lastImportDateStr = await getDatabase().getConfigParam('lastImportedDate')\n    console.log(lastImportDateStr)\n    const dateToImport = moment(lastImportDateStr).add(1, 'days')\n    console.log(dateToImport)\n\n    if (!dateToImport.isBefore(moment(), 'date')) {\n      log.info('Up to date. Exiting...')\n      break\n    }\n\n    log.info(`Importing ${dateToImport.toString()}`)\n\n    const scrapedIncidents = await getScraper().scrape(dateToImport)\n    if (scrapedIncidents.length + numMapsRequests > MAPS_REQUESTS_PER_DAY) {\n      log.info('Import suspended: maps quota exceeded.')\n      break\n    }\n    const incidentsWithLocation = await getMaps().addLocationInfoToIncidents(scrapedIncidents)\n    await getDatabase().addIncidents(incidentsWithLocation)\n    await getDatabase().setConfigParam('lastImportedDate', dateToImport.toISOString())\n    numMapsRequests += scrapedIncidents.length\n    log.info(`${dateToImport.toString()} successfully imported. Quota remaining: ${MAPS_REQUESTS_PER_DAY - numMapsRequests}`)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = require(\"@google/maps\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@google/maps\"\n// module id = 8\n// module chunks = 0","module.exports = require(\"apollo-client\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"apollo-client\"\n// module id = 9\n// module chunks = 0","module.exports = require(\"graphql-tag\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"graphql-tag\"\n// module id = 10\n// module chunks = 0","module.exports = require(\"isomorphic-fetch\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"isomorphic-fetch\"\n// module id = 11\n// module chunks = 0","module.exports = require(\"lodash\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash\"\n// module id = 12\n// module chunks = 0","module.exports = require(\"request-x-ray\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"request-x-ray\"\n// module id = 13\n// module chunks = 0","module.exports = require(\"x-ray\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"x-ray\"\n// module id = 14\n// module chunks = 0"],"sourceRoot":""}