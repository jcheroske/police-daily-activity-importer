{"version":3,"sources":["webpack:///webpack/bootstrap fd8abfaaf42e53ec65c3","webpack:///./src/log.js","webpack:///external \"envalid\"","webpack:///external \"moment-timezone\"","webpack:///./src/database.js","webpack:///./src/maps.js","webpack:///./src/scraper.js","webpack:///external \"bluebird\"","webpack:///./src/index.js","webpack:///external \"@google/maps\"","webpack:///external \"apollo-client\"","webpack:///external \"es6-error\"","webpack:///external \"graphql-tag\"","webpack:///external \"isomorphic-fetch\"","webpack:///external \"request-x-ray\"","webpack:///external \"simple-rate-limiter\"","webpack:///external \"winston\"","webpack:///external \"x-ray\""],"names":["consoleTransport","transports","Console","level","colorize","stderrLevels","Logger","levels","error","warn","info","verbose","debug","result","client","query","fetchPolicy","configId","data","allConfigs","id","getConfigId","name","getConfigParam","value","mutate","mutation","undefined","setConfigParam","incident","createIncident","caseNumber","description","offense","reportedAt","streetAddress","Incident","isIncidentUnsaved","allIncidents","deleteAllIncidents","database","env","cleanEnv","process","GRAPH_QL_ENDPOINT","desc","networkInterface","uri","Object","freeze","locationInfo","geocodeAddress","city","state","address","split","trim","zipCode","match","lat","lng","addLocationInfoToIncident","rawAddress","join","response","googleGeocode","status","results","json","QueryLimitExceeded","formatted_address","geometry","location","constructor","maps","GOOGLE_MAPS_API_KEY","createClient","key","Promise","promisify","geocode","to","per","date","options","method","form","btnGo","RequestType","getFormDateFields","getFormSecurityFields","xRay","filters","parseDate","parseAddress","parseDescription","driver","selector","incidents","toISOString","fromCallback","POLICE_INCIDENT_URL","cb","length","err","scrape","securityFields","startMoment","endMoment","ddlFromMonth","month","ddlFromDate","ddlFromYear","year","ddlToMonth","ddlToDate","ddlToYear","defaultDate","tz","replace","re","exec","scraper","deleteAll","lastImportDateStr","dateToImport","add","isBefore","toString","scrapedIncidents","scrapedIncident","incidentWithLocation","run","catch"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fd8abfaaf42e53ec65c3","import winston from 'winston'\n\nconst consoleTransport = new winston.transports.Console({\n  level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',\n  colorize: true,\n  stderrLevels: ['error']\n})\n\nexport default new winston.Logger({\n  levels: { error: 0, warn: 1, info: 2, verbose: 3, debug: 4 },\n  transports: [\n    consoleTransport\n  ]\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/log.js","module.exports = require(\"envalid\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"envalid\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"moment-timezone\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment-timezone\"\n// module id = 2\n// module chunks = 0","import ApolloClient, { createNetworkInterface } from 'apollo-client'\nimport envalid, {str} from 'envalid'\nimport gql from 'graphql-tag'\nimport 'isomorphic-fetch'\nimport log from './log'\n\nlet client, configId\n\nasync function getConfigId () {\n  const result = await client.query({\n    fetchPolicy: 'network-only',\n    query: gql`\n      query {\n        allConfigs {\n          id\n        }  \n      }\n    `\n  })\n  configId = result.data.allConfigs[0].id\n}\n\nasync function getConfigParam (name) {\n  const result = await client.query({\n    fetchPolicy: 'network-only',\n    query: gql`\n      query {\n        allConfigs {\n          id,\n          ${name}\n        }  \n      }\n    `\n  })\n  return result.data.allConfigs[0][name]\n}\n\nasync function setConfigParam (name, value) {\n  await client.mutate({\n    mutation: gql`\n      mutation {\n        updateConfig (\n          id: \"${configId}\",\n          ${name}: \"${value}\"\n        ) {\n          id\n        }\n      }\n    `\n  })\n  return undefined\n}\n\nasync function createIncident (incident) {\n  log.debug('Creating new Incident', incident)\n  const {data: {createIncident}} = await client.mutate({\n    mutation: gql`\n      mutation {\n        createIncident(\n          caseNumber: \"${incident.caseNumber}\"\n          description: \"${incident.description}\"\n          offense: \"${incident.offense}\"\n          reportedAt: \"${incident.reportedAt}\"\n          streetAddress: \"${incident.streetAddress}\"\n        ) {\n          id,\n          caseNumber\n        }\n      }\n    `\n  })\n  return createIncident\n}\n\nasync function isIncidentUnsaved (incident) {\n  const {data: {Incident}} = await client.query({\n    fetchPolicy: 'network-only',\n    query: gql`\n      query {\n        Incident(caseNumber: \"${incident.caseNumber}\") {\n          id,\n          caseNumber\n        }  \n      }\n    `\n  })\n  log.debug(`Database: case number ${incident.caseNumber} ${Incident == null ? 'does not exist' : 'already exists'} in the database`)\n  return Incident == null\n}\n\nasync function deleteAllIncidents () {\n  const {data: {allIncidents}} = await client.query({\n    fetchPolicy: 'network-only',\n    query: gql`\n      query {\n        allIncidents {\n          id\n        }\n      }\n    `\n  })\n\n  for (const incident of allIncidents) {\n    await client.mutate({\n      mutation: gql`\n        mutation {\n          deleteIncident(\n            id: \"${incident.id}\"\n          ) {\n            id\n          }\n        }\n      `\n    })\n    log.debug(`Database: incident ${incident.id} deleted`)\n  }\n}\n\nlet database\nexport default () => {\n  if (!database) {\n    const env = envalid.cleanEnv(process.env, {\n      GRAPH_QL_ENDPOINT: str({desc: 'GraphQL endpoint URL'})\n    })\n\n    log.info('Database: connecting to GraphQL endpoint.')\n    client = new ApolloClient({\n      networkInterface: createNetworkInterface({\n        uri: env.GRAPH_QL_ENDPOINT\n      })\n    })\n\n    getConfigId()\n\n    database = Object.freeze({\n      getConfigParam,\n      setConfigParam,\n      createIncident,\n      isIncidentUnsaved,\n      deleteAllIncidents\n    })\n    log.info('Database: successfully connected to GraphQL endpoint.')\n  }\n  return database\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/database.js","import GoogleMaps from '@google/maps'\nimport envalid, {str} from 'envalid'\nimport ExtendableError from 'es6-error'\nimport rateLimiter from 'simple-rate-limiter'\nimport log from './log'\n\nexport class QueryLimitExceeded extends ExtendableError {\n  constructor () {\n    super('Google maps API query limit exceeded')\n  }\n}\n\nlet googleGeocode\n\nasync function addLocationInfoToIncident (incident) {\n  const locationInfo = await geocodeAddress({\n    streetAddress: incident.streetAddress,\n    city: 'Bellingham',\n    state: 'WA'\n  })\n\n  return locationInfo ? {\n    ...incident,\n    streetAddress: locationInfo.address.split(',')[0].trim(),\n    zipCode: locationInfo.address.match(/\\d{5}/)[0],\n    lat: locationInfo.lat,\n    lng: locationInfo.lng\n  } : undefined\n}\n\nasync function geocodeAddress ({streetAddress, city, state}) {\n  const rawAddress = [streetAddress, city, state].join(', ')\n  log.debug(`Maps: about to geocode ${rawAddress}`)\n\n  const response = await googleGeocode({address: rawAddress})\n\n  const {status, results} = response.json\n  if (status === 'OVER_QUERY_LIMIT') {\n    throw new QueryLimitExceeded()\n  }\n\n  if (status !== 'OK') {\n    log.warn(`Maps: geocode failed for ${rawAddress} with status ${status}`)\n    return undefined\n  }\n\n  const {formatted_address: address, geometry: {location: {lat, lng}}} = results[0]\n  log.debug(`Maps: geocode successful: ${address} ${lat} ${lng}`)\n  return {address, lat, lng}\n}\n\nlet maps\nexport default () => {\n  if (!maps) {\n    const env = envalid.cleanEnv(process.env, {\n      GOOGLE_MAPS_API_KEY: str({desc: 'Google maps node API key'})\n    })\n\n    const client = GoogleMaps.createClient({\n      key: env.GOOGLE_MAPS_API_KEY,\n      Promise\n    })\n\n    googleGeocode = Promise.promisify(rateLimiter(::client.geocode).to(45).per(1000))\n\n    maps = Object.freeze({addLocationInfoToIncident})\n    log.info('Maps: initialized')\n  }\n  return maps\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/maps.js","import envalid, {str} from 'envalid'\nimport moment from 'moment-timezone'\nimport makeDriver from 'request-x-ray'\nimport Xray from 'x-ray'\nimport log from './log'\n\nlet POLICE_INCIDENT_URL\n\nasync function scrape (date) {\n  const options = {\n    method: 'POST',\n    form: {\n      btnGo: 'Go',\n      RequestType: 'radbtnDetails',\n      ...getFormDateFields(date, date),\n      ...await getFormSecurityFields()\n    }\n  }\n\n  const xRay = Xray({\n    filters: {\n      parseDate,\n      parseAddress,\n      parseDescription,\n      trim\n    }\n  })\n  xRay.driver(makeDriver(options))\n\n  const selector = {\n    incidents: xRay('td.info', [{\n      reportedAt: `b:nth-of-type(1) | parseDate:${date.toISOString()}`,\n      streetAddress: 'b:nth-of-type(2) | parseAddress | trim',\n      offense: 'b:nth-of-type(3) | trim',\n      caseNumber: 'b:nth-of-type(4) | trim',\n      description: '@html | parseDescription | trim'\n    }])\n  }\n\n  try {\n    const {incidents} = await Promise.fromCallback(cb => xRay(POLICE_INCIDENT_URL, selector)(cb))\n    log.info(`Scraper: ${incidents.length} incidents retreived`)\n    log.debug('Scraped incidents', incidents)\n    return incidents\n  } catch (err) {\n    log.error('Scraper: error while fetching incidents', err)\n    throw err\n  }\n}\n\nasync function getFormSecurityFields () {\n  const selector = {\n    '__VIEWSTATE': 'input[name=\"__VIEWSTATE\"]@value',\n    '__VIEWSTATEGENERATOR': 'input[name=\"__VIEWSTATEGENERATOR\"]@value',\n    '__EVENTVALIDATION': 'input[name=\"__EVENTVALIDATION\"]@value'\n  }\n\n  const xRay = Xray()\n  try {\n    const securityFields = await Promise.fromCallback(cb => xRay(POLICE_INCIDENT_URL, selector)(cb))\n    log.info('Scraper: obtained security fields')\n    return securityFields\n  } catch (err) {\n    log.error('Scraper: error while fetching security fields', err)\n    throw err\n  }\n}\n\nconst getFormDateFields = (startMoment, endMoment) => {\n  return {\n    ddlFromMonth: startMoment.month() + 1,\n    ddlFromDate: startMoment.date(),\n    ddlFromYear: startMoment.year(),\n    ddlToMonth: endMoment.month() + 1,\n    ddlToDate: endMoment.date(),\n    ddlToYear: endMoment.year()\n  }\n}\n\nconst parseDate = (value, defaultDate) => {\n  if (!value) return defaultDate\n\n  return moment.tz(value, 'MMM DD YYYY hh:mmA', 'America/Los_Angeles').toISOString()\n}\n\nconst parseAddress = value => value.replace('BLK', '').replace(/\\s+/g, ' ')\n\nconst parseDescription = value => {\n  if (!value) return undefined\n\n  const re = /([^>]*)(<br>)?$/\n  const result = re.exec(value)\n  return result == null ? undefined : result[1].replace(/(\\s|\\\\n|\\\\r|\\\\t)+/g, ' ')\n}\n\nconst trim = value => value.trim()\n\nlet scraper\nexport default () => {\n  if (!scraper) {\n    const env = envalid.cleanEnv(process.env, {\n      POLICE_INCIDENT_URL: str({desc: 'Police daily activity URL'})\n    })\n\n    POLICE_INCIDENT_URL = env.POLICE_INCIDENT_URL\n    scraper = Object.freeze({\n      scrape\n    })\n    log.info('Scraper: initialized')\n  }\n  return scraper\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/scraper.js","module.exports = require(\"bluebird\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird\"\n// module id = 6\n// module chunks = 0","/* global Promise:true */\nimport BluebirdPromise from 'bluebird'\nimport moment from 'moment-timezone'\nimport getDatabase from './database'\nimport log from './log'\nimport getMaps from './maps'\nimport getScraper from './scraper'\n\nPromise = BluebirdPromise\n\nrun()\n// deleteAll()\n   .catch(err => log.error(err))\n\nasync function deleteAll () {\n  await getDatabase().deleteAllIncidents()\n  await getDatabase().setConfigParam('lastImportedDate', moment.tz('12/31/1998', 'MM/DD/YYYY', 'America/Los_Angeles').toISOString())\n}\n\nasync function run () {\n  log.info('Police Daily Activity Importer starting...')\n\n  while (true) {\n    const lastImportDateStr = await getDatabase().getConfigParam('lastImportedDate')\n    const dateToImport = moment.tz(lastImportDateStr, 'America/Los_Angeles').add(1, 'days')\n\n    if (!dateToImport.isBefore(moment(), 'date')) {\n      log.info('Up to date. Exiting...')\n      break\n    }\n\n    log.info(`Importing ${dateToImport.toString()}`)\n\n    const scrapedIncidents = await getScraper().scrape(dateToImport)\n    for (const scrapedIncident of scrapedIncidents) {\n      if (await getDatabase().isIncidentUnsaved(scrapedIncident)) {\n        const incidentWithLocation = await getMaps().addLocationInfoToIncident(scrapedIncident)\n        if (incidentWithLocation !== undefined) {\n          getDatabase().createIncident(incidentWithLocation)\n        }\n      }\n    }\n    await getDatabase().setConfigParam('lastImportedDate', dateToImport.toISOString())\n    log.info(`${dateToImport.toString()} successfully imported.`)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = require(\"@google/maps\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@google/maps\"\n// module id = 8\n// module chunks = 0","module.exports = require(\"apollo-client\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"apollo-client\"\n// module id = 9\n// module chunks = 0","module.exports = require(\"es6-error\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"es6-error\"\n// module id = 10\n// module chunks = 0","module.exports = require(\"graphql-tag\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"graphql-tag\"\n// module id = 11\n// module chunks = 0","module.exports = require(\"isomorphic-fetch\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"isomorphic-fetch\"\n// module id = 12\n// module chunks = 0","module.exports = require(\"request-x-ray\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"request-x-ray\"\n// module id = 13\n// module chunks = 0","module.exports = require(\"simple-rate-limiter\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"simple-rate-limiter\"\n// module id = 14\n// module chunks = 0","module.exports = require(\"winston\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"winston\"\n// module id = 15\n// module chunks = 0","module.exports = require(\"x-ray\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"x-ray\"\n// module id = 16\n// module chunks = 0"],"sourceRoot":""}