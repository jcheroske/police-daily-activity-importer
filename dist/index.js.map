{"version":3,"sources":["webpack:///webpack/bootstrap 2e600f24c12067b07ec1","webpack:///./src/log.js","webpack:///external \"envalid\"","webpack:///external \"lodash\"","webpack:///external \"moment-timezone\"","webpack:///external \"graphql-tag\"","webpack:///./src/database.js","webpack:///./src/maps.js","webpack:///./src/scraper.js","webpack:///external \"bluebird\"","webpack:///external \"isomorphic-fetch\"","webpack:///./src/index.js","webpack:///./src/models/config.js","webpack:///./src/models/incident.js","webpack:///external \"@google/maps\"","webpack:///external \"apollo-client\"","webpack:///external \"es6-error\"","webpack:///external \"request-x-ray\"","webpack:///external \"winston\"","webpack:///external \"winston-papertrail\"","webpack:///external \"x-ray\""],"names":["LOG_LEVELS","env","cleanEnv","process","PAPERTRAIL_LOG_LEVEL","desc","choices","devDefault","PAPERTRAIL_HOST","PAPERTRAIL_PORT","PAPERTRAIL_CLIENT_NAME","CONSOLE_LOG_LEVEL","consoleTransport","transports","Console","level","colorize","stderrLevels","papertrailTransport","host","port","hostname","logFormat","message","Logger","levels","error","warn","info","verbose","debug","GRAPHCOOL_AUTHENTICATION_TOKEN","GRAPH_QL_ENDPOINT","networkInterface","uri","use","applyMiddleware","req","next","options","headers","authorization","client","database","Object","freeze","config","incident","init","rawAddress","streetAddress","replace","join","response","googleGeocode","address","err","QueryLimitExceeded","failedReturnValue","geocodeFailed","json","status","results","formatted_address","formattedAddress","geometry","location","lat","lng","streetAddressRegExResult","split","prettyStreetAddress","trim","zipCodeRegExResult","match","zipCode","geocodeIncident","GOOGLE_MAPS_API_KEY","createClient","key","timeout","Promise","promisify","geocode","maps","constructor","date","method","form","btnGo","RequestType","getFormDateFields","getFormSecurityFields","xRay","filters","parseDate","parseDescription","driver","selector","incidents","reportedAt","toISOString","offense","caseNumber","description","result","fromCallback","POLICE_INCIDENT_URL","cb","Error","forEach","i","city","state","length","scrape","securityFields","scraper","startMoment","endMoment","ddlFromMonth","month","ddlFromDate","ddlFromYear","year","ddlToMonth","ddlToDate","ddlToYear","value","defaultDate","tz","undefined","re","exec","totalStats","startDay","endDay","scraped","imported","alreadyExists","lastImportDateStr","getParam","dateToImport","add","isBefore","dayStats","scrapedIncidents","scrapedIncident","existingIncident","findByCaseNumber","create","setParam","format","DATE_FORMAT","prop","exit","importIncidents","printGeocodeDayHeader","findUngeocoded","prevReportedDay","currReportedDay","isoDateTimeToIsoDay","printGeocodeDayStats","geocodeData","incrementNoLocationCount","incrementGeocodedCount","saveGeocodedData","printGeocodeTotalHeader","printGeocodeTotals","geocodeIncidents","geocodeDayStats","Map","isoDay","getStatsForDay","geocoded","noLocation","get","set","formatIsoDay","isoDateTime","startOf","totalGeocoded","totalNoLocation","day","fetchPolicy","getParamQuery","setParamMutation","configId","query","data","allConfigs","id","name","variables","Config","mutate","mutation","updateConfig","findByCaseNumberQuery","findUngeocodedQuery","createMutation","saveGeocodeDataMutation","dbInstance"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2e600f24c12067b07ec1","import envalid, {num, str} from 'envalid'\nimport winston from 'winston'\nimport { Papertrail } from 'winston-papertrail'\n\nconst LOG_LEVELS = ['debug', 'verbose', 'info', 'warn', 'error']\n\nconst env = envalid.cleanEnv(process.env, {\n  PAPERTRAIL_LOG_LEVEL: str({ desc: `Papertrail log level (${LOG_LEVELS})`, choices: LOG_LEVELS, devDefault: 'debug' }),\n  PAPERTRAIL_HOST: str({ desc: 'Papertrail hostname' }),\n  PAPERTRAIL_PORT: num({ desc: 'Papertrail port number' }),\n  PAPERTRAIL_CLIENT_NAME: str({ desc: 'Papertrail client name' }),\n\n  CONSOLE_LOG_LEVEL: str({ desc: `Console log level (${LOG_LEVELS})`, choices: LOG_LEVELS, devDefault: 'debug' })\n})\n\nconst consoleTransport = new winston.transports.Console({\n  level: env.CONSOLE_LOG_LEVEL,\n  colorize: true,\n  stderrLevels: ['error']\n})\n\nconst papertrailTransport = new Papertrail({\n  level: env.PAPERTRAIL_LOG_LEVEL,\n  host: env.PAPERTRAIL_HOST,\n  port: env.PAPERTRAIL_PORT,\n  hostname: env.PAPERTRAIL_CLIENT_NAME,\n  colorize: true,\n  logFormat (level, message) {\n    return '[' + level + '] ' + message\n  }\n})\n\nexport default new winston.Logger({\n  levels: { error: 0, warn: 1, info: 2, verbose: 3, debug: 4 },\n  transports: [\n    papertrailTransport,\n    consoleTransport\n  ]\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/log.js","module.exports = require(\"envalid\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"envalid\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"lodash\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash\"\n// module id = 2\n// module chunks = 0","module.exports = require(\"moment-timezone\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment-timezone\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"graphql-tag\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"graphql-tag\"\n// module id = 4\n// module chunks = 0","import ApolloClient, { createNetworkInterface } from 'apollo-client'\nimport envalid, {str} from 'envalid'\nimport log from './log'\nimport initConfig from './models/config'\nimport initIncident from './models/incident'\n\nlet database\n\nexport async function init () {\n  const env = envalid.cleanEnv(process.env, {\n    GRAPHCOOL_AUTHENTICATION_TOKEN: str({desc: 'Graphcool Authentication Token'}),\n    GRAPH_QL_ENDPOINT: str({desc: 'GraphQL endpoint URL'})\n  })\n\n  const networkInterface = createNetworkInterface({\n    uri: env.GRAPH_QL_ENDPOINT\n  })\n\n  networkInterface.use([{\n    applyMiddleware (req, next) {\n      if (!req.options.headers) {\n        req.options.headers = {}\n      }\n\n      req.options.headers.authorization = `Bearer ${env.GRAPHCOOL_AUTHENTICATION_TOKEN}`\n      next()\n    }\n  }])\n\n  const client = new ApolloClient({networkInterface})\n\n  database = Object.freeze({\n    config: await initConfig(client),\n    incident: await initIncident(client)\n  })\n\n  log.verbose('Database: initialized')\n}\n\nexport default () => database\n\n\n\n// WEBPACK FOOTER //\n// ./src/database.js","import GoogleMaps from '@google/maps'\nimport envalid, {str} from 'envalid'\nimport ExtendableError from 'es6-error'\nimport log from './log'\n\nexport class QueryLimitExceeded extends ExtendableError {\n  constructor () {\n    super('Google maps API query limit exceeded')\n  }\n}\n\nlet googleGeocode\n\nasync function geocodeIncident (incident) {\n  const rawAddress = [\n    incident.streetAddress.replace('BLK', '').replace(/\\s+/g, ' '),\n    'Bellingham',\n    'WA'\n  ].join(', ')\n  log.debug(`Maps: about to geocode ${rawAddress}`)\n\n  let response\n  try {\n    response = await googleGeocode({address: rawAddress})\n  } catch (err) {\n    if (err.message === 'timeout') {\n      throw new QueryLimitExceeded()\n    }\n    log.error('Maps: error when invoking Google maps API', err)\n    throw err\n  }\n\n  const failedReturnValue = {\n    geocodeFailed: true\n  }\n\n  if (!response || !response.json) {\n    log.warn('Maps: empty response or json payload', response)\n    return failedReturnValue\n  }\n\n  const {status, results} = response.json\n\n  if (response.json.status === 'OVER_QUERY_LIMIT') {\n    log.warn('Maps: Query limit exceeded')\n    throw new QueryLimitExceeded()\n  }\n\n  if (status !== 'OK') {\n    log.warn('Maps: Non-OK status received', rawAddress, status)\n    return failedReturnValue\n  }\n\n  if (!results || !results[0]) {\n    log.warn('Maps: missing results payload', rawAddress, results)\n    return failedReturnValue\n  }\n\n  const {formatted_address: formattedAddress, geometry} = results[0]\n\n  if (!formattedAddress) {\n    log.warn('Maps: missing formatted address', rawAddress, results[0])\n    return failedReturnValue\n  }\n\n  if (!geometry || !geometry.location || !geometry.location.lat || !geometry.location.lng) {\n    log.warn('Maps: missing or incomplete geometry object', rawAddress, results[0])\n    return failedReturnValue\n  }\n\n  const streetAddressRegExResult = formattedAddress.split(',')\n  if (!streetAddressRegExResult || !streetAddressRegExResult[0]) {\n    log.warn('Maps: street address extraction failed', formattedAddress)\n    return failedReturnValue\n  }\n\n  const prettyStreetAddress = streetAddressRegExResult[0].trim()\n\n  const zipCodeRegExResult = formattedAddress.match(/\\d{5}/)\n  if (!zipCodeRegExResult || !zipCodeRegExResult[0]) {\n    log.warn('Maps: zip code extraction failed', formattedAddress)\n    return failedReturnValue\n  }\n\n  const zipCode = zipCodeRegExResult[0]\n\n  const {lat, lng} = geometry.location\n\n  log.debug('Maps: geocode successful', prettyStreetAddress, zipCode, lat, lng)\n\n  return {\n    geocodeFailed: false,\n    prettyStreetAddress,\n    zipCode,\n    lat,\n    lng\n  }\n}\n\nlet maps\n\nexport async function init () {\n  const env = envalid.cleanEnv(process.env, {\n    GOOGLE_MAPS_API_KEY: str({desc: 'Google maps node API key'})\n  })\n\n  const client = GoogleMaps.createClient({\n    key: env.GOOGLE_MAPS_API_KEY,\n    'rate.limit': 40,\n    timeout: 10000\n  })\n\n  googleGeocode = Promise.promisify(::client.geocode)\n\n  maps = Object.freeze({geocodeIncident})\n  log.verbose('Maps: initialized')\n}\n\nexport default () => maps\n\n\n\n// WEBPACK FOOTER //\n// ./src/maps.js","import envalid, {str} from 'envalid'\nimport {isEmpty} from 'lodash'\nimport moment from 'moment-timezone'\nimport makeDriver from 'request-x-ray'\nimport Xray from 'x-ray'\nimport log from './log'\n\nlet POLICE_INCIDENT_URL\n\nasync function scrape (date) {\n  const options = {\n    method: 'POST',\n    form: {\n      btnGo: 'Go',\n      RequestType: 'radbtnDetails',\n      ...getFormDateFields(date, date),\n      ...await getFormSecurityFields()\n    }\n  }\n\n  const xRay = Xray({\n    filters: {\n      parseDate,\n      parseDescription,\n      trim\n    }\n  })\n  xRay.driver(makeDriver(options))\n\n  const selector = {\n    incidents: xRay('td.info', [{\n      reportedAt: `b:nth-of-type(1) | parseDate:${date.toISOString()}`,\n      streetAddress: 'b:nth-of-type(2) | trim',\n      offense: 'b:nth-of-type(3) | trim',\n      caseNumber: 'b:nth-of-type(4) | trim',\n      description: '@html | parseDescription | trim'\n    }])\n  }\n\n  let result\n  try {\n    result = await Promise.fromCallback(cb => xRay(POLICE_INCIDENT_URL, selector)(cb))\n  } catch (err) {\n    log.error('Scraper: error while fetching incidents', err)\n    throw err\n  }\n\n  if (!result || !result.incidents) {\n    log.error('Scraper: malformed scraper result', result)\n    throw new Error('Scraper: malformed scraper result')\n  }\n\n  const {incidents} = result\n  incidents.forEach(i => {\n    i.city = 'Bellingham'\n    i.state = 'WA'\n  })\n  log.verbose(`Scraper: ${incidents.length} incidents scraped`)\n  log.debug('Scraped incidents', incidents)\n  return incidents\n}\n\nlet securityFields\nasync function getFormSecurityFields () {\n  if (securityFields) return securityFields\n\n  const selector = {\n    '__VIEWSTATE': 'input[name=\"__VIEWSTATE\"]@value',\n    '__VIEWSTATEGENERATOR': 'input[name=\"__VIEWSTATEGENERATOR\"]@value',\n    '__EVENTVALIDATION': 'input[name=\"__EVENTVALIDATION\"]@value'\n  }\n\n  const xRay = Xray()\n  try {\n    securityFields = await Promise.fromCallback(cb => xRay(POLICE_INCIDENT_URL, selector)(cb))\n  } catch (err) {\n    log.error('Scraper: error while fetching security fields', err)\n    throw err\n  }\n\n  if (!securityFields || isEmpty(securityFields)) {\n    log.error('Scraper: malformed security fields', securityFields)\n    throw new Error('Scraper: malformed security fields')\n  }\n  log.verbose('Scraper: obtained security fields')\n  return securityFields\n}\n\nconst getFormDateFields = (startMoment, endMoment) => {\n  return {\n    ddlFromMonth: startMoment.month() + 1,\n    ddlFromDate: startMoment.date(),\n    ddlFromYear: startMoment.year(),\n    ddlToMonth: endMoment.month() + 1,\n    ddlToDate: endMoment.date(),\n    ddlToYear: endMoment.year()\n  }\n}\n\nconst parseDate = (value, defaultDate) => {\n  if (!value) return defaultDate\n\n  return moment.tz(value, 'MMM DD YYYY hh:mmA', 'America/Los_Angeles').toISOString()\n}\n\nconst parseDescription = value => {\n  if (!value) return undefined\n\n  const re = /([^>]*)(<br>)?$/\n  const result = re.exec(value)\n  return result == null ? undefined : result[1].replace(/(\\s|\\\\n|\\\\r|\\\\t)+/g, ' ')\n}\n\nconst trim = value => value.trim()\n\nlet scraper\n\nexport async function init () {\n  const env = envalid.cleanEnv(process.env, {\n    POLICE_INCIDENT_URL: str({desc: 'Police daily activity URL'})\n  })\n\n  POLICE_INCIDENT_URL = env.POLICE_INCIDENT_URL\n  scraper = Object.freeze({\n    scrape\n  })\n  log.verbose('Scraper: initialized')\n}\n\nexport default () => scraper\n\n\n\n// WEBPACK FOOTER //\n// ./src/scraper.js","module.exports = require(\"bluebird\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird\"\n// module id = 8\n// module chunks = 0","module.exports = require(\"isomorphic-fetch\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"isomorphic-fetch\"\n// module id = 9\n// module chunks = 0","/* global Promise:true */\nimport BluebirdPromise from 'bluebird'\nimport 'isomorphic-fetch'\nimport {assign, padStart} from 'lodash'\nimport moment from 'moment-timezone'\nimport getDatabase, {init as initDb} from './database'\nimport log from './log'\nimport getMaps, {init as initMaps, QueryLimitExceeded} from './maps'\nimport getScraper, {init as initScraper} from './scraper'\n\nPromise = BluebirdPromise\n\nconst DATE_FORMAT = 'MM/DD/YYYY'\n\nexport async function importIncidents () {\n  await initDb()\n  await initScraper()\n  log.info('Police Daily Activity Incident Importer run started...')\n  log.info('-----------------------------------------------')\n  log.info('| Date       | Scraped | Imported | Duplicate |')\n  log.info('-----------------------------------------------')\n\n  const totalStats = {\n    startDay: undefined,\n    endDay: undefined,\n    scraped: 0,\n    imported: 0,\n    alreadyExists: 0\n  }\n\n  try {\n    while (true) {\n      const lastImportDateStr = await getDatabase().config.getParam('lastImportedDate')\n      const dateToImport = moment.tz(lastImportDateStr, 'America/Los_Angeles').add(1, 'days')\n\n      if (!dateToImport.isBefore(moment(), 'date')) {\n        break\n      }\n\n      if (typeof totalStats.startDay === 'undefined') {\n        totalStats.startDay = dateToImport\n      }\n      totalStats.endDay = dateToImport\n\n      const dayStats = {\n        scraped: 0,\n        imported: 0,\n        alreadyExists: 0\n      }\n\n      try {\n        const scrapedIncidents = await getScraper().scrape(dateToImport)\n        dayStats.scraped = scrapedIncidents.length\n        for (const scrapedIncident of scrapedIncidents) {\n          const existingIncident = await getDatabase().incident.findByCaseNumber(scrapedIncident.caseNumber)\n          if (existingIncident == null) {\n            await getDatabase().incident.create(scrapedIncident)\n            dayStats.imported++\n          } else {\n            dayStats.alreadyExists++\n          }\n        }\n        await getDatabase().config.setParam('lastImportedDate', dateToImport.toISOString())\n      } finally {\n        log.info(`| ${padStart(dateToImport.format(DATE_FORMAT), 10)} | ${padStart(dayStats.scraped, 7)} | ${padStart(dayStats.imported, 8)} | ${padStart(dayStats.alreadyExists, 9)} |`)\n        for (const prop in dayStats) {\n          totalStats[prop] += dayStats[prop]\n        }\n      }\n    }\n  } catch (err) {\n    log.error(err)\n  } finally {\n    log.info('-----------------------------------------------')\n    log.info('Police Daily Activity Incident Importer run finished...')\n    log.info('------------------------------------------------------------')\n    log.info('| Start Date | End Date   | Scraped | Imported | Duplicate |')\n    log.info('------------------------------------------------------------')\n    log.info(`| ${padStart(totalStats.startDay.format(DATE_FORMAT), 10)} | ${padStart(totalStats.endDay.format(DATE_FORMAT), 10)} | ${padStart(totalStats.scraped, 7)} | ${padStart(totalStats.imported, 8)} | ${padStart(totalStats.alreadyExists, 9)} |`)\n    log.info('------------------------------------------------------------')\n    process.exit(0)\n  }\n}\n\nexport async function geocodeIncidents () {\n  await initDb()\n  await initMaps()\n  printGeocodeDayHeader()\n\n  try {\n    const incidents = await getDatabase().incident.findUngeocoded()\n\n    let prevReportedDay\n    for (const incident of incidents) {\n      const currReportedDay = isoDateTimeToIsoDay(incident.reportedAt)\n      if (currReportedDay !== prevReportedDay) {\n        printGeocodeDayStats(prevReportedDay)\n        prevReportedDay = currReportedDay\n      }\n\n      const geocodeData = await getMaps().geocodeIncident(incident)\n      geocodeData.geocodeFailed ? incrementNoLocationCount(currReportedDay) : incrementGeocodedCount(currReportedDay)\n      await getDatabase().incident.saveGeocodedData({\n        ...incident,\n        ...geocodeData\n      })\n    }\n  } catch (err) {\n    if (err instanceof QueryLimitExceeded) {\n      log.warn('Google Maps geocode quota exhausted')\n    } else {\n      log.error(err)\n    }\n  } finally {\n    printGeocodeTotalHeader()\n    printGeocodeTotals()\n    process.exit(0)\n  }\n}\n\nfunction printGeocodeDayHeader () {\n  log.info('---------------------------------------')\n  log.info('| Date       | Geocoded | No Location |')\n  log.info('---------------------------------------')\n}\n\nconst geocodeDayStats = new Map()\n\nfunction incrementGeocodedCount (isoDay) {\n  getStatsForDay(isoDay).geocoded++\n}\n\nfunction incrementNoLocationCount (isoDay) {\n  getStatsForDay(isoDay).noLocation++\n}\n\nfunction getStatsForDay (isoDay) {\n  let dayStats = geocodeDayStats.get(isoDay)\n  if (dayStats == null) {\n    dayStats = {\n      geocoded: 0,\n      noLocation: 0\n    }\n    geocodeDayStats.set(isoDay, dayStats)\n  }\n  return dayStats\n}\n\nfunction printGeocodeDayStats (isoDay) {\n  if (isoDay != null) {\n    const dayStats = geocodeDayStats.get(isoDay)\n    log.info(`| ${padStart(formatIsoDay(isoDay), 10)} | ${padStart(dayStats.geocoded, 8)} | ${padStart(dayStats.noLocation, 11)} |`)\n  }\n}\n\nfunction isoDateTimeToIsoDay (isoDateTime) {\n  return moment(isoDateTime).startOf('day').toISOString()\n}\n\nfunction formatIsoDay (isoDay) {\n  return moment(isoDay).format(DATE_FORMAT)\n}\n\nfunction printGeocodeTotalHeader () {\n  log.info('----------------------------------------------------')\n  log.info('| Start Date | End Date   | Geocoded | No Location |')\n  log.info('----------------------------------------------------')\n}\n\nfunction printGeocodeTotals () {\n  let startDay\n  let endDay\n  let totalGeocoded = 0\n  let totalNoLocation = 0\n  geocodeDayStats.forEach((dayStats, day) => {\n    if (startDay == null) {\n      startDay = day\n    }\n    endDay = day\n    totalGeocoded += dayStats.geocoded\n    totalNoLocation += dayStats.noLocation\n  })\n  log.info(`| ${padStart(formatIsoDay(startDay), 10)} | ${padStart(formatIsoDay(endDay), 10)} | ${padStart(totalGeocoded, 8)} | ${padStart(totalNoLocation, 11)} |`)\n  log.info('----------------------------------------------------')\n}\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import gql from 'graphql-tag'\nimport log from '../log'\n\nconst fetchPolicy = 'network-only'\n\nconst getParamQuery = gql`\n  query GetConfigParam($id: ID!) {\n    Config(id: $id) {\n      lastImportedDate\n    }\n  }\n`\n\nconst setParamMutation = gql`\n  mutation SetConfigParam(\n    $id: ID!,\n    $lastImportedDate: DateTime\n  ) {\n    updateConfig(\n      id: $id\n      lastImportedDate: $lastImportedDate\n    ) {\n      id\n    }\n  }\n`\n\nexport default async function init (client) {\n  const configId = (await client.query({\n    fetchPolicy: 'network-only',\n    query: gql`\n      query GetConfigId {\n        allConfigs {\n          id\n        }\n      }\n    `\n  })).data.allConfigs[0].id\n\n  return {\n    async getParam (name) {\n      const result = await client.query({\n        fetchPolicy,\n        query: getParamQuery,\n        variables: {id: configId}\n      })\n\n      if (!result || !result.data || !result.data.Config || !result.data.Config[name]) {\n        log.error('Database: config.getParam(): malformed GraphQL result', name, result)\n        throw new Error('Database: config.getParam(): malformed GraphQL result')\n      }\n\n      return result.data.Config[name]\n    },\n\n    async setParam (name, value) {\n      const result = await client.mutate({\n        fetchPolicy,\n        mutation: setParamMutation,\n        variables: {\n          id: configId,\n          [name]: value\n        }\n      })\n\n      if (!result || !result.data || !result.data.updateConfig) {\n        log.error('Database: config.setParam(): malformed GraphQL result', name, value, result)\n        throw new Error('Database: config.setParam(): malformed GraphQL result')\n      }\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/config.js","import gql from 'graphql-tag'\nimport {get} from 'lodash'\nimport log from '../log'\n\nconst fetchPolicy = 'network-only'\n\nconst findByCaseNumberQuery = gql`\n  query FindIncidentByCaseNumber($caseNumber: String!) {\n    Incident(caseNumber: $caseNumber) {\n      id\n    }\n  }\n`\n\nconst findUngeocodedQuery = gql`\n  query FindUngeocoded (\n    $nullBoolean: Boolean = null\n  ) {\n    allIncidents(\n      filter: {\n        geocodeFailed: $nullBoolean\n      },\n      orderBy: reportedAt_ASC\n    ) {\n      id,\n      streetAddress,\n      city,\n      reportedAt,\n      state\n    }\n  }\n`\n\nconst createMutation = gql`\n  mutation CreateIncident(\n    $caseNumber: String!\n    $description: String\n    $offense: String!\n    $reportedAt: DateTime!\n    $streetAddress: String!\n    $city: String!\n    $state: String!\n  ) {\n    createIncident(\n      caseNumber: $caseNumber\n      description: $description\n      offense: $offense\n      reportedAt: $reportedAt\n      streetAddress: $streetAddress\n      city: $city\n      state: $state\n    ) {\n      id\n    }\n  }\n`\n\nconst saveGeocodeDataMutation = gql`\n  mutation SaveGeocodeData(\n    $geocodeFailed: Boolean!\n    $id: ID!\n    $lat: Float\n    $lng: Float\n    $prettyStreetAddress: String\n    $zipCode: String\n  ) {\n    updateIncident(\n      geocodeFailed: $geocodeFailed\n      id: $id\n      lat: $lat\n      lng: $lng\n      prettyStreetAddress: $prettyStreetAddress\n      zipCode: $zipCode\n    ) {\n      id\n    }\n  }\n`\n\nexport default async function init (client) {\n  return {\n    async findByCaseNumber (caseNumber) {\n      const result = await client.query({\n        fetchPolicy,\n        query: findByCaseNumberQuery,\n        variables: {caseNumber}\n      })\n\n      const dbInstance = get(result, 'data.Incident')\n      log.debug(`Incident.findByCaseNumber()`, caseNumber, dbInstance)\n      return dbInstance\n    },\n\n    async findUngeocoded () {\n      const result = await client.query({\n        fetchPolicy,\n        query: findUngeocodedQuery\n      })\n\n      const incidents = get(result, 'data.allIncidents')\n      if (incidents == null) {\n        log.error('Database: instance.findUngeocoded(): malformed GraphQL result', result)\n        throw new Error('Database: instance.findUngeocoded(): malformed GraphQL result')\n      } else {\n        log.debug(`Incident.findUngeocoded()`, incidents)\n      }\n      return incidents\n    },\n\n    async create (incident) {\n      const result = await client.mutate({\n        mutation: createMutation,\n        variables: incident\n      })\n\n      const dbInstance = get(result, 'data.createIncident')\n      if (dbInstance == null) {\n        log.error('Database: instance.create(): malformed GraphQL result', result)\n        throw new Error('Database: instance.create(): malformed GraphQL result')\n      } else {\n        log.debug(`Incident.create()`, incident, dbInstance)\n      }\n      return dbInstance\n    },\n\n    async saveGeocodedData (incident) {\n      const result = await client.mutate({\n        mutation: saveGeocodeDataMutation,\n        variables: incident\n      })\n\n      const dbInstance = get(result, 'data.updateIncident')\n      if (dbInstance == null) {\n        log.error('Database: instance.update(): malformed GraphQL result', result)\n        throw new Error('Database: instance.update(): malformed GraphQL result')\n      } else {\n        log.debug(`Incident.update()`, incident, dbInstance)\n      }\n      return dbInstance\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/incident.js","module.exports = require(\"@google/maps\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@google/maps\"\n// module id = 13\n// module chunks = 0","module.exports = require(\"apollo-client\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"apollo-client\"\n// module id = 14\n// module chunks = 0","module.exports = require(\"es6-error\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"es6-error\"\n// module id = 15\n// module chunks = 0","module.exports = require(\"request-x-ray\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"request-x-ray\"\n// module id = 16\n// module chunks = 0","module.exports = require(\"winston\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"winston\"\n// module id = 17\n// module chunks = 0","module.exports = require(\"winston-papertrail\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"winston-papertrail\"\n// module id = 18\n// module chunks = 0","module.exports = require(\"x-ray\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"x-ray\"\n// module id = 19\n// module chunks = 0"],"sourceRoot":""}